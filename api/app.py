"""
API FastAPI pour servir le mod√®le de pr√©diction de prix de voitures
Lancer avec : uvicorn api.app:app --reload --port 8000
"""
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from typing import List, Optional
import joblib
import pandas as pd
import sys
import os
from datetime import datetime

# Ajouter le dossier parent au path pour importer src
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from src.preprocess import DataPreprocessor

# üöÄ Initialisation de l'API
app = FastAPI(
    title="üöó Car Price Prediction API",
    description="API MLOps pour pr√©dire le prix des voitures d'occasion",
    version="1.0.0"
)

# üì¶ Chargement du mod√®le et du preprocessor
try:
    model = joblib.load('models/production_model.pkl')
    preprocessor = DataPreprocessor.load('models/preprocessor.pkl')
    print("‚úÖ Mod√®le et preprocessor charg√©s avec succ√®s")
except Exception as e:
    print(f"‚ùå Erreur de chargement : {e}")
    model = None
    preprocessor = None

# üìä Sch√©ma de donn√©es pour la validation
class CarInput(BaseModel):
    year: int = Field(..., ge=2000, le=2024, description="Ann√©e de fabrication")
    km_driven: int = Field(..., ge=0, le=500000, description="Kilom√®tres parcourus")
    fuel: str = Field(..., description="Type de carburant (Petrol, Diesel, Electric, Hybrid)")
    transmission: str = Field(..., description="Type de transmission (Manual, Automatic)")
    owner: str = Field(..., description="Type de propri√©taire (First, Second, Third)")
    engine_cc: int = Field(..., description="Cylindr√©e du moteur")
    seats: int = Field(..., ge=2, le=8, description="Nombre de si√®ges")
    
    class Config:
        schema_extra = {
            "example": {
                "year": 2020,
                "km_driven": 35000,
                "fuel": "Diesel",
                "transmission": "Automatic",
                "owner": "First",
                "engine_cc": 1500,
                "seats": 5
            }
        }

class PredictionResponse(BaseModel):
    predicted_price: float
    confidence: str
    input_data: dict
    timestamp: str

class BatchPredictionResponse(BaseModel):
    predictions: List[PredictionResponse]
    total_cars: int

# üè† Route principale
@app.get("/")
def home():
    """Page d'accueil de l'API"""
    return {
        "message": "üöó Bienvenue sur l'API Car Price Prediction",
        "status": "running",
        "model_loaded": model is not None,
        "endpoints": {
            "health": "/health",
            "predict": "/predict (POST)",
            "batch_predict": "/predict/batch (POST)",
            "model_info": "/model/info",
            "docs": "/docs"
        }
    }

# üíö Health check
@app.get("/health")
def health_check():
    """V√©rifie que l'API et le mod√®le sont op√©rationnels"""
    if model is None or preprocessor is None:
        raise HTTPException(status_code=503, detail="Mod√®le non charg√©")
    return {
        "status": "healthy",
        "model_loaded": True,
        "timestamp": datetime.now().isoformat()
    }

# üîÆ Pr√©diction simple
@app.post("/predict", response_model=PredictionResponse)
def predict_price(car: CarInput):
    """
    Pr√©dit le prix d'une voiture
    
    Args:
        car: Donn√©es de la voiture (CarInput)
    
    Returns:
        PredictionResponse avec le prix pr√©dit
    """
    if model is None or preprocessor is None:
        raise HTTPException(status_code=503, detail="Mod√®le non disponible")
    
    try:
        # Convertir en DataFrame
        input_df = pd.DataFrame([car.dict()])
        
        # Pr√©traiter
        X = preprocessor.transform(input_df)
        
        # Pr√©dire
        prediction = model.predict(X)[0]
        
        # D√©terminer le niveau de confiance (simplifi√©)
        if 10000 <= prediction <= 50000:
            confidence = "high"
        elif 5000 <= prediction <= 70000:
            confidence = "medium"
        else:
            confidence = "low"
        
        return PredictionResponse(
            predicted_price=round(prediction, 2),
            confidence=confidence,
            input_data=car.dict(),
            timestamp=datetime.now().isoformat()
        )
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur de pr√©diction : {str(e)}")

# üì¶ Pr√©diction batch
@app.post("/predict/batch", response_model=BatchPredictionResponse)
def batch_predict(cars: List[CarInput]):
    """
    Pr√©dit le prix de plusieurs voitures en une seule requ√™te
    
    Args:
        cars: Liste de voitures (List[CarInput])
    
    Returns:
        BatchPredictionResponse avec toutes les pr√©dictions
    """
    if model is None or preprocessor is None:
        raise HTTPException(status_code=503, detail="Mod√®le non disponible")
    
    try:
        predictions = []
        for car in cars:
            result = predict_price(car)
            predictions.append(result)
        
        return BatchPredictionResponse(
            predictions=predictions,
            total_cars=len(predictions)
        )
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur batch : {str(e)}")

# ‚ÑπÔ∏è Informations sur le mod√®le
@app.get("/model/info")
def model_info():
    """Retourne les informations sur le mod√®le en production"""
    if model is None:
        raise HTTPException(status_code=503, detail="Mod√®le non charg√©")
    
    return {
        "model_type": type(model).__name__,
        "features": preprocessor.feature_names if preprocessor else [],
        "model_params": model.get_params() if hasattr(model, 'get_params') else {},
        "last_updated": "2025-01-15"  # √Ä adapter avec une vraie date
    }

# üßπ Recharger le mod√®le (utile pour le d√©ploiement continu)
@app.post("/model/reload")
def reload_model():
    """Recharge le mod√®le depuis le disque"""
    global model, preprocessor
    try:
        model = joblib.load('models/production_model.pkl')
        preprocessor = DataPreprocessor.load('models/preprocessor.pkl')
        return {
            "status": "success",
            "message": "Mod√®le recharg√© avec succ√®s",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur de rechargement : {str(e)}")

# üéØ Exemple d'utilisation
@app.get("/example")
def get_example():
    """Retourne un exemple de requ√™te pour /predict"""
    return {
        "endpoint": "/predict",
        "method": "POST",
        "example_body": {
            "year": 2020,
            "km_driven": 35000,
            "fuel": "Diesel",
            "transmission": "Automatic",
            "owner": "First",
            "engine_cc": 1500,
            "seats": 5
        },
        "curl_command": """
curl -X POST "http://localhost:8000/predict" \\
  -H "Content-Type: application/json" \\
  -d '{
    "year": 2020,
    "km_driven": 35000,
    "fuel": "Diesel",
    "transmission": "Automatic",
    "owner": "First",
    "engine_cc": 1500,
    "seats": 5
  }'
        """
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5001)